'For both 32 bit & 64 bit
Option Explicit

'WinMain
Declare PtrSafe Function GetModuleHandleW Lib "Kernel32" (ByVal lpModuleName As LongPtr) As LongPtr
Declare PtrSafe Function LoadIconW Lib "User32" (ByVal hInstance As LongPtr, ByVal lpIconName As LongPtr) As LongPtr
Declare PtrSafe Function LoadCursorW Lib "User32" (ByVal hInstance As LongPtr, ByVal lpCursorName As LongPtr) As LongPtr
Declare PtrSafe Function GetStockObject Lib "Gdi32" (ByVal i As LongPtr) As LongPtr
Declare PtrSafe Function RegisterClassExW Lib "User32" (ByVal lpWndClass As LongPtr) As LongPtr
Declare PtrSafe Function CreateWindowExW Lib "User32" (ByVal dwExStyle As LongPtr, ByVal lpClassName As LongPtr, ByVal lpWindowName As LongPtr, ByVal dwStyle As LongPtr, ByVal x As LongPtr, ByVal y As LongPtr, ByVal nWidth As LongPtr, ByVal nHeight As LongPtr, ByVal hWndParent As LongPtr, ByVal hMenu As LongPtr, ByVal hInstance As LongPtr, ByVal lpParam As LongPtr) As LongPtr
Declare PtrSafe Function ShowWindow Lib "User32" (ByVal hWnd As LongPtr, ByVal nCmdShow As LongPtr) As LongPtr
Declare PtrSafe Function UpdateWindow Lib "User32" (ByVal hWnd As LongPtr) As LongPtr
Declare PtrSafe Function PeekMessageW Lib "User32" (ByVal lpMsg As LongPtr, ByVal hWnd As LongPtr, ByVal wMsgFilterMin As LongPtr, ByVal wMsgFilterMax As LongPtr, ByVal wRemoveMsg As LongPtr) As LongPtr
Declare PtrSafe Function TranslateMessage Lib "User32" (ByVal lpMsg As LongPtr) As LongPtr
Declare PtrSafe Function DispatchMessageW Lib "User32" (ByVal lpMsg As LongPtr) As LongPtr
Declare PtrSafe Function GetLastError Lib "Kernel32" () As LongPtr
'WndProc
Declare PtrSafe Function MessageBoxW Lib "User32" (ByVal hWnd As LongPtr, ByVal lpText As LongPtr, ByVal lpCaption As LongPtr, ByVal uType As LongPtr) As LongPtr
Declare PtrSafe Function DefWindowProcW Lib "User32" (ByVal hWnd As LongPtr, ByVal MSG As LongPtr, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
Declare PtrSafe Function DestroyWindow Lib "User32" (ByVal hWnd As LongPtr) As LongPtr
Declare PtrSafe Function PostQuitMessage Lib "User32" (ByVal nExitCode As LongPtr) As LongPtr

'Structures
'WNDCLASSEX wcx;
Type WNDCLASSEX
    cbSize As Long 'Stack Top
    style As Long
    lpfnWndProc As LongPtr
    cbClsExtra As Long
    cbWndExtra As Long
    hInstance As LongPtr
    hIcon As LongPtr
    hCursor As LongPtr
    hbrBackground As LongPtr
    lpszMenuName As LongPtr
    lpszClassName As LongPtr
    hIconSm As LongPtr 'Stack Bottom
End Type
Public wcx As WNDCLASSEX
Public lpWndClass As LongPtr 'Pointer
'POINT pt
Type POINTSTRUCT
    x As Long 'Stack Top
    y As Long 'Stack Bottom
End Type
Public pt As POINTSTRUCT
Public lpMsgPt As LongPtr
'MSG msg;
Type MSG
    hWnd As LongPtr 'Stack Top
    message As Long
    wParam As LongPtr
    lParam As LongPtr
    time As Long
    pt As POINTSTRUCT
    lPrivate As LongPtr 'Stack Bottom
End Type
Public wmsg As MSG
Public lpMsg As LongPtr 'Pointer

'Const
Public Const PM_REMOVE = 1
'Window Styles
Public Const CS_VREDRAW = 1
Public Const CS_HREDRAW = 2
Public Const CS_DBLCLKS = 8
Public Const IDI_APPLICATION = 32512
Public Const IDC_ARROW = 32512
Public Const CW_USEDEFAULT = &H80000000
Public Const WS_OVERLAPPED = 0
Public Const WS_CAPTION = &HC00000
Public Const WS_SYSMENU = &H80000
Public Const WS_THICKFRAME = &H40000
Public Const WS_MINIMIZEBOX = &H20000
Public Const WS_MAXIMIZEBOX = &H10000
Public Const WS_OVERLAPPEDWINDOW = WS_OVERLAPPED Or WS_CAPTION Or WS_SYSMENU Or WS_THICKFRAME Or WS_MINIMIZEBOX Or WS_MAXIMIZEBOX
Public Const WS_VISIBLE = &H10000000
Public Const WS_CHILD = &H40000000
Public Const SW_SHOW = 5
'Messages
Public Const WM_DESTROY = 2
Public Const WM_CLOSE = &H10
Public Const WM_QUIT = &H12
'Virtual Keys
Public Const MB_YESNO = 4
Public Const MB_ICONQUESTION = &H20
Public Const IDYES = 6
'Brushes
Public Const GRAY_BRUSH = 2
'Custom Values
'Screen
Public Const DEFAULT_SCREEN_WIDTH = 1024
Public Const DEFAULT_SCREEN_HEIGHT = 768

'Global Handles
Public ghInst As LongPtr
Public ghWnd As LongPtr

'Strings
Public szMsgText As String
Public lpszMsgText As LongPtr
Public szMsgTitle As String
Public lpszMsgTitle As LongPtr

'Debug
Public nLastError As LongPtr

Sub Start()
    Call WinMain(0, 0, 0, 0)
End Sub

Function WinMain(ByVal hInstance As LongPtr, ByVal hPrevInstance As LongPtr, ByVal lpCmdLine As LongPtr, ByVal nCmdShow As LongPtr)
'Text
    Dim szCaption As String
    Dim lpszCaption As LongPtr
'Main Cycle
    Dim nPeek As LongPtr
'Debug
    Dim nWndClass As LongPtr 'For Debug Purpose

'Pointers
    lpWndClass = VarPtr(wcx.cbSize)
    lpMsg = VarPtr(wmsg.hWnd)

    wcx.cbSize = Len(wcx) '48 bytes for x32, 80 bytes for x64
    wcx.style = CS_HREDRAW Or CS_VREDRAW Or CS_DBLCLKS
    wcx.lpfnWndProc = GetAddr(AddressOf WndProc)
    wcx.cbClsExtra = 0
    wcx.cbWndExtra = 0
    wcx.hInstance = GetModuleHandleW(0)
    If wcx.hInstance = 0 Then
        Call MsgBox("GetModuleHandle Error: " & GetLastError())
        Exit Function
    Else
        ghInst = wcx.hInstance
    End If
    wcx.hIcon = LoadIconW(0, IDI_APPLICATION)
    wcx.hCursor = LoadCursorW(0, IDC_ARROW)
    wcx.hbrBackground = GetStockObject(GRAY_BRUSH)
    wcx.lpszMenuName = 0
    wcx.lpszClassName = StrPtr("MainWindowClassName")
    wcx.hIconSm = wcx.hIcon

    nWndClass = RegisterClassExW(lpWndClass)
    If nWndClass = 0 Then
        nLastError = GetLastError()
        If nLastError = 1410 Then
            'Call MsgBox("RegisterClass Error 1410 (0x582): ERROR_CLASS_ALREADY_EXISTS")
        Else
            Call MsgBox("RegisterClass Error: " & nLastError)
            Exit Function
        End If
    End If

    szCaption = "VBA WinAPI OpenGL Demo"
    lpszCaption = StrPtr(szCaption)
    ghWnd = CreateWindowExW(0, wcx.lpszClassName, lpszCaption, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, DEFAULT_SCREEN_WIDTH, DEFAULT_SCREEN_HEIGHT, 0, 0, wcx.hInstance, 0)
    If ghWnd = 0 Then
        Call MsgBox("CreateWindow Error: " & GetLastError())
        Exit Function
    End If

    Call InitializeGL

    Call ShowWindow(ghWnd, SW_SHOW)
    Call UpdateWindow(ghWnd)
    
WinMainLoop:
    nPeek = PeekMessageW(lpMsg, 0, 0, 0, PM_REMOVE)
    If nPeek = 0 Then
        Call DrawGLScene 'We'll draw the OpenGL Scene outside the WndProc
    Else
        If wmsg.message = WM_QUIT Then
            WinMain = wmsg.wParam
            Exit Function 'Don't use Call ExitProcess(0)
        Else
            Call TranslateMessage(lpMsg)
            Call DispatchMessageW(lpMsg)
        End If
    End If
    GoTo WinMainLoop
End Function

Function WndProc(ByVal hWnd As LongPtr, ByVal message As LongPtr, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr

Select Case message
    Case WM_CLOSE
        GoTo lbl_wmClose
    Case WM_DESTROY
        GoTo lbl_wmDestroy
End Select

lbl_DefWndProc:
    WndProc = DefWindowProcW(hWnd, message, wParam, lParam)
    Exit Function

lbl_wmClose:
        szMsgText = "Close?"
        lpszMsgText = StrPtr(szMsgText)
        szMsgTitle = "Such A Good Application"
        lpszMsgTitle = StrPtr(szMsgTitle)
        If MessageBoxW(hWnd, lpszMsgText, lpszMsgTitle, MB_YESNO Or MB_ICONQUESTION) = IDYES Then
            Call DestroyWindow(hWnd)
        End If
        GoTo lbl_WndProc_Return0

lbl_wmDestroy:
    Call PostQuitMessage(0)
lbl_WndProc_Return0:
    WndProc = 0
End Function

Function GetAddr(ByVal lpProc As LongPtr) As LongPtr
    'This Function has been created to fit the 'AddressOf' syntax
    GetAddr = lpProc
End Function

Function InitializeGL()

End Function

Function DrawGLScene()

End Function
